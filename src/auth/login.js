// File: src/auth/login.js
import { verifyPassword } from '../utils/crypto.js';
import { showError } from '../utils/dom.js';
import { showPasswordChangeModal } from '../ui/passwordModal.js';
import { startSessionTimer, setupActivityListeners } from '../utils/session.js';
import { appState } from '../state/appState.js';
import { renderAppLayout } from '../app/renderAppLayout.js';

// ðŸ’¡ Import the new dataService
import { dataService } from '../services/dataService.js';

// ðŸ’¡ Remove the direct import of POSDatabase, as it's no longer needed here
// import { POSDatabase } from '../db/posDatabase.js';

export async function renderLogin() {
Â  appState.currentSection = "order";

Â  document.getElementById("app").innerHTML = `
Â  Â  <div id="loginContainer">
Â  Â  Â  <h2>Login</h2>
Â  Â  Â  <form id="loginForm">
Â  Â  Â  Â  <input id="loginUser" placeholder="Username" autocomplete="username" required>
Â  Â  Â  Â  <input id="loginPass" type="password" placeholder="Password" autocomplete="current-password" required>
Â  Â  Â  Â  <button type="submit">Login</button>
Â  Â  Â  </form>
Â  Â  Â  <div id="loginError" class="hidden" style="color:red"></div>
Â  Â  </div>
Â  `;

Â  document.getElementById("loginForm").onsubmit = async (e) => {
Â  Â  e.preventDefault();

Â  Â  const username = document.getElementById("loginUser").value.trim();
Â  Â  const password = document.getElementById("loginPass").value;

Â  Â  showError("loginError", "");

Â  Â  try {
Â  Â  Â  // Small delay for timing attack mitigation. This is good practice.
Â  Â  Â  await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 100));
Â  Â  } catch (delayErr) {
Â  Â  Â  console.error("Timing delay failed:", delayErr);
Â  Â  }

Â  Â  let user;
Â  Â  try {
Â  Â  Â  // ðŸ’¡ Replace the direct database call with a call to the data service's cache
Â  Â  Â  const users = await dataService.get("users");
Â  Â  Â  user = users.find(u => u.username.toLowerCase() === username.toLowerCase());
Â  Â  } catch (dbErr) {
Â  Â  Â  console.error("User lookup failed:", dbErr);
Â  Â  Â  showError("loginError", "Database error. Please reload.");
Â  Â  Â  return;
Â  Â  }

Â  Â  if (!user || !user.passwordHash) {
Â  Â  Â  showError("loginError", "Invalid username or password");
Â  Â  Â  return;
Â  Â  }

Â  Â  let isMatch = false;
Â  Â  try {
Â  Â  Â  isMatch = await verifyPassword(user.passwordHash, password);
Â  Â  } catch (verifyErr) {
Â  Â  Â  console.error("Password verification error:", verifyErr);
Â  Â  Â  showError("loginError", "Error verifying password.");
Â  Â  Â  return;
Â  Â  }

Â  Â  if (!isMatch) {
Â  Â  Â  showError("loginError", "Invalid username or password");
Â  Â  Â  return;
Â  Â  }

Â  Â  // --- START OF AMENDED LOGIN LOGIC ---
Â  Â  const sessionData = {
Â  Â  Â  id: user.id,
Â  Â  Â  username: user.username,
Â  Â  Â  role: user.role,
Â  Â  Â  cashRegisterId: user.cashRegisterId,
Â  Â  Â  sessionExpiry: Date.now() + 8 * 60 * 60 * 1000,
Â  Â  Â  lastActivity: Date.now(),
Â  Â  Â  sessionId: crypto.randomUUID()
Â  Â  };

Â  Â  try {
Â  Â  Â  appState.currentUser = sessionData;
Â  Â  Â  localStorage.setItem('currentSession', JSON.stringify(sessionData));
Â  Â  } catch (sessionErr) {
Â  Â  Â  console.error("Session storage failed:", sessionErr);
Â  Â  Â  showError("loginError", "Login succeeded, but session could not be saved.");
Â  Â  Â  return;
Â  Â  }

Â  Â  startSessionTimer();
Â  Â  setupActivityListeners();
Â  Â  if (user.needsPasswordReset) {
Â  Â  Â  showPasswordChangeModal(appState.currentUser);
Â  Â  Â  return;
Â  Â  }

Â  Â  renderAppLayout();
Â  };
}