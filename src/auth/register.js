// File: src/auth/register.js
import { validatePassword } from '../utils/validation.js';
import { showError } from '../utils/dom.js';
import { hashPassword } from '../utils/crypto.js';
import { genId } from '../utils/id.js';
import { appState } from '../state/appState.js';
import { renderAppLayout } from '../app/renderAppLayout.js';
import {generateRandomAlphanumeric} from '../ui/addUserModal.js';

// ðŸ’¡ Import the new dataService
import { dataService } from '../services/dataService.js';

// ðŸ’¡ Import the original POSDatabase for put() and getByIndex() operations
import { POSDatabase } from '../db/posDatabase.js';

export async function renderRegister() {
Â  Â  document.getElementById("app").innerHTML = `
Â  Â  Â  <div class="register-container">
Â  Â  Â  Â  <h2 style="text-align:center; margin-bottom: 1rem;">Create Admin Account</h2>
Â  Â  Â  Â  <form id="registerForm">
Â  Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  Â  <label for="regUser">Username</label>
Â  Â  Â  Â  Â  Â  <input id="regUser" placeholder="Enter username" required>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  Â  <label for="regPass">Password</label>
Â  Â  Â  Â  Â  Â  <input id="regPass" type="password" placeholder="Create password" required>
Â  Â  Â  Â  Â  Â  <div class="password-requirements">
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 0 0 0.3rem;">Password must contain:</p>
Â  Â  Â  Â  Â  Â  Â  <ul>
Â  Â  Â  Â  Â  Â  Â  Â  <li id="req-length">â‰¥ 8 characters</li>
Â  Â  Â  Â  Â  Â  Â  Â  <li id="req-upper">1 uppercase letter</li>
Â  Â  Â  Â  Â  Â  Â  Â  <li id="req-lower">1 lowercase letter</li>
Â  Â  Â  Â  Â  Â  Â  Â  <li id="req-number">1 number</li>
Â  Â  Â  Â  Â  Â  Â  Â  <li id="req-special">1 special character (!@#$%^&*)</li>
Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  Â  <label for="regPass2">Confirm Password</label>
Â  Â  Â  Â  Â  Â  <input id="regPass2" type="password" placeholder="Re-enter password" required>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <button type="submit" class="btn-primary" style="width:100%; margin-top: 0.8rem;">Create Account</button>
Â  Â  Â  Â  </form>
Â  Â  Â  Â  <div id="regError" class="error-message hidden" style="margin-top: 0.8rem;"></div>
Â  Â  Â  </div>
Â  Â  `;

Â  Â  // Password validation feedback
Â  Â  document.getElementById("regPass").addEventListener('input', (e) => {
Â  Â  Â  const validation = validatePassword(e.target.value);
Â  Â  Â  document.getElementById("req-length").style.color = validation.requirements.minLength ? 'green' : 'gray';
Â  Â  Â  document.getElementById("req-upper").style.color = validation.requirements.hasUpper ? 'green' : 'gray';
Â  Â  Â  document.getElementById("req-lower").style.color = validation.requirements.hasLower ? 'green' : 'gray';
Â  Â  Â  document.getElementById("req-number").style.color = validation.requirements.hasNumber ? 'green' : 'gray';
Â  Â  Â  document.getElementById("req-special").style.color = validation.requirements.hasSpecial ? 'green' : 'gray';
Â  Â  });

Â  Â  document.getElementById("registerForm").onsubmit = async (e) => {
Â  Â  Â  e.preventDefault();
Â  Â  Â  const username = document.getElementById("regUser").value.trim();
Â  Â  Â  const password = document.getElementById("regPass").value.trim();
Â  Â  Â  const password2 = document.getElementById("regPass2").value.trim();
Â  Â  Â  const submitBtn = document.querySelector('#registerForm button[type="submit"]');
Â  Â  Â  showError("regError", "");
Â  Â  Â  submitBtn.disabled = true;
Â  Â  Â  submitBtn.textContent = "Creating...";

Â  Â  Â  if (!username) {
Â  Â  Â  Â  showError("regError", "Username is required");
Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  document.getElementById("regUser").focus();
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  if (!password || !password2) {
Â  Â  Â  Â  showError("regError", "Both password fields are required");
Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  const validation = validatePassword(password);
Â  Â  Â  if (!validation.passed) {
Â  Â  Â  Â  const missing = Object.entries(validation.requirements)
Â  Â  Â  Â  Â  .filter(([_, met]) => !met)
Â  Â  Â  Â  Â  .map(([key]) => {
Â  Â  Â  Â  Â  Â  switch (key) {
Â  Â  Â  Â  Â  Â  Â  case 'minLength': return '8+ characters';
Â  Â  Â  Â  Â  Â  Â  case 'hasUpper': return 'uppercase letter';
Â  Â  Â  Â  Â  Â  Â  case 'hasLower': return 'lowercase letter';
Â  Â  Â  Â  Â  Â  Â  case 'hasNumber': return 'number';
Â  Â  Â  Â  Â  Â  Â  case 'hasSpecial': return 'special character';
Â  Â  Â  Â  Â  Â  Â  default: return '';
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  });

Â  Â  Â  Â  showError("regError", `Password missing: ${missing.join(', ')}`);
Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  document.getElementById("regPass").focus();
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  if (password !== password2) {
Â  Â  Â  Â  showError("regError", "Passwords don't match");
Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  document.getElementById("regPass2").focus();
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  // ðŸ’¡ OPTIMIZATION: Check for username existence with a specific query, not getAll()
Â  Â  Â  try {
Â  Â  Â  Â  // Use the more efficient getByIndex to check if a user with that username already exists
Â  Â  Â  Â  const existingUsers = await POSDatabase.getByIndex("users", "username", username.toLowerCase());
Â  Â  Â  Â  
Â  Â  Â  Â  if (existingUsers.length > 0) {
Â  Â  Â  Â  Â  showError("regError", "Username already exists");
Â  Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  Â  document.getElementById("regUser").focus();
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Failed to check existing users:", err);
Â  Â  Â  Â  showError("regError", "Could not check existing users. Try again.");
Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  // --- START: cashRegisterId generation for Admin ---
Â  Â  Â  // ðŸ’¡ To ensure uniqueness of the cashRegisterId, we can either
Â  Â  Â  // 1. Pre-fetch all users to check locally (like your original code)
Â  Â  Â  // 2. Use a more robust check directly on the database.
Â  Â  Â  // Since you already have the `users` array pre-fetched in the appState
Â  Â  Â  // after the app initializes, we can use that for the check.
Â  Â  Â  // However, in the register view, the `appState` might not be populated yet,
Â  Â  Â  // so we'll stick with fetching on demand here, but with a better method.
Â  Â  Â  
Â  Â  Â  // First, let's get the list of existing users from the cache
Â  Â  Â  const existingUsersForCashRegisterIdCheck = await dataService.get("users");

Â  Â  Â  let cashRegisterId;
Â  Â  Â  let isUniqueLocally = false;
Â  Â  Â  let attempts = 0;
Â  Â  Â  const MAX_ATTEMPTS = 10;

Â  Â  Â  while (!isUniqueLocally && attempts < MAX_ATTEMPTS) {
Â  Â  Â  Â  Â  const uniqueSuffix = generateRandomAlphanumeric(4);
Â  Â  Â  Â  Â  const generatedId = `EPOS-${uniqueSuffix}`;

Â  Â  Â  Â  Â  // Check against the cached 'users' array
Â  Â  Â  Â  Â  if (!existingUsersForCashRegisterIdCheck.some(u => u.cashRegisterId === generatedId)) {
Â  Â  Â  Â  Â  Â  Â  cashRegisterId = generatedId;
Â  Â  Â  Â  Â  Â  Â  isUniqueLocally = true;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  attempts++;
Â  Â  Â  }

Â  Â  Â  if (!isUniqueLocally) {
Â  Â  Â  Â  Â  showError("regError", "Could not generate a unique Cash Register ID. Please try again.");
Â  Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  // --- END: cashRegisterId generation ---

Â  Â  Â  let passwordHash;
Â  Â  Â  try {
Â  Â  Â  Â  passwordHash = await hashPassword(password);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Password hashing failed:", err);
Â  Â  Â  Â  showError("regError", "Failed to secure password. Try again.");
Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  const newUserId = genId("user");

Â  Â  Â  try {
Â  Â  Â  Â  await POSDatabase.put("users", {
Â  Â  Â  Â  Â  id: newUserId,
Â  Â  Â  Â  Â  username,
Â  Â  Â  Â  Â  passwordHash,
Â  Â  Â  Â  Â  role: "admin",
Â  Â  Â  Â  Â  cashRegisterId,
Â  Â  Â  Â  Â  createdAt: new Date().toISOString()
Â  Â  Â  Â  });
        // ðŸ’¡ OPTIMIZATION: Update the local cache after a successful write
        const newlyCreatedUser = { 
            id: newUserId, 
            username, 
            role: "admin", 
            cashRegisterId
        };
        const usersArray = await dataService.get("users");
        usersArray.push(newlyCreatedUser);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Failed to save user to DB:", err);
Â  Â  Â  Â  showError("regError", "Failed to save user. Please refresh and try again.");
Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  try {
Â  Â  Â  Â  appState.currentUser = {
Â  Â  Â  Â  Â  id: newUserId,
Â  Â  Â  Â  Â  username,
Â  Â  Â  Â  Â  role: "admin",
Â  Â  Â  Â  Â  cashRegisterId,
Â  Â  Â  Â  Â  sessionExpiry: Date.now() + 8 * 60 * 60 * 1000
Â  Â  Â  Â  };
Â  Â  Â  Â  localStorage.setItem('currentSession', JSON.stringify(appState.currentUser));
Â  Â  Â  Â  renderAppLayout();
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Post-registration error:", err);
Â  Â  Â  Â  showError("regError", "Account created but login failed. Please log in manually.");
Â  Â  Â  } finally {
Â  Â  Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  Â  Â  submitBtn.textContent = "Create Account";
Â  Â  Â  }
Â  Â  };
}