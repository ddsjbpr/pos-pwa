// File: src/voice/voiceOrder.js

import { POSDatabase } from '../db/posDatabase.js';
import { appState } from '../state/appState.js';
import { renderSection } from '../app/renderSection.js';

export async function startVoiceOrder() {
  console.log("ЁЯОЩя╕П startVoiceOrder called");

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SpeechRecognition) {
    console.error("тЭМ SpeechRecognition not supported in this browser.");
    alert("рдпрд╣ рдбрд┐рд╡рд╛рдЗрд╕ рд╡реЙрдпрд╕ рд░рд┐рдХрдЧреНрдирд┐рд╢рди рдХреЛ рд╕рдкреЛрд░реНрдЯ рдирд╣реАрдВ рдХрд░рддрд╛ред");
    return;
  }

  const recognition = new SpeechRecognition();
  recognition.lang = 'hi-IN'; // Hindi locale
  recognition.interimResults = false;
  recognition.continuous = false;

  recognition.onstart = () => {
    console.log("ЁЯОд Voice recognition started (Hindi)");
    alert("ЁЯОд рдСрд░реНрдбрд░ рдмреЛрд▓реЗрдВ (рдЙрджрд╛рд╣рд░рдг: 'рдПрдХ рд╕рдореЛрд╕рд╛ рджреЗрдирд╛')");
  };

  recognition.onresult = async (event) => {
    const transcript = event.results[0][0].transcript;
    console.log("ЁЯУе Voice input:", transcript);
    alert("рдЖрдкрдиреЗ рдХрд╣рд╛: " + transcript);

    await processVoiceCommand(transcript);
  };

  recognition.onerror = (event) => {
    console.error("тЪая╕П Voice recognition error:", event.error);
    alert("рд╡реЙрдпрд╕ рдПрд░рд░: " + event.error);
  };

  recognition.onend = () => {
    console.log("ЁЯЫС Voice recognition ended");
    // Optionally restart listening
    // recognition.start();
  };

  recognition.start();
}

async function processVoiceCommand(transcript) {
  const lower = transcript.toLowerCase();

  // Check for checkout phrases
  if (
    lower.includes("рдмрд┐рд▓") || lower.includes("checkout") ||
    lower.includes("рдкреЗрдореЗрдиреНрдЯ") || lower.includes("payment")
  ) {
    alert("тЬЕ рдЪреЗрдХрдЖрдЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...");
    document.querySelector('[data-voice-checkout]')?.click();
    return;
  }

  // Get menu items
  const menuItems = await POSDatabase.getAll("menuItems");
  const menuNames = menuItems.map(i => i.name.toLowerCase());

  // Try matching any item name in transcript
  const found = menuItems.find(i => lower.includes(i.name.toLowerCase()));
  if (found) {
    alert(`ЁЯЫТ '${found.name}' рдХреЛ рдСрд░реНрдбрд░ рдореЗрдВ рдЬреЛрдбрд╝рд╛ рдЬрд╛рдПрдЧрд╛`);
    document.querySelector(`[data-voice-item="${found.name.toLowerCase()}"]`)?.click();
  } else {
    alert("тЭУ рдпрд╣ рдЖрдЗрдЯрдо рдирд╣реАрдВ рдорд┐рд▓рд╛: " + transcript);
  }
}
