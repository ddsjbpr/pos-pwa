// File: src/voice/voiceOrder.js

import { POSDatabase } from '../db/posDatabase.js';
import { appState } from '../state/appState.js';
import { renderSection } from '../app/renderSection.js';

export async function startVoiceOrder() {
  console.log("üéôÔ∏è startVoiceOrder called");

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SpeechRecognition) {
    console.error("‚ùå SpeechRecognition not supported in this browser.");
    alert("‡§Ø‡§π ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§µ‡•â‡§Ø‡§∏ ‡§∞‡§ø‡§ï‡§ó‡•ç‡§®‡§ø‡§∂‡§® ‡§ï‡•ã ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§");
    return;
  }

  const recognition = new SpeechRecognition();
  recognition.lang = 'hi-IN'; // Hindi locale
  recognition.interimResults = false;
  recognition.continuous = false;

  recognition.onstart = () => {
    console.log("üé§ Voice recognition started (Hindi)");
    alert("üé§ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡•ã‡§≤‡•á‡§Ç (‡§â‡§¶‡§æ‡§π‡§∞‡§£: '‡§è‡§ï ‡§∏‡§Æ‡•ã‡§∏‡§æ ‡§¶‡•á‡§®‡§æ')");
  };

  recognition.onresult = async (event) => {
    const transcript = event.results[0][0].transcript;
    console.log("üì• Voice input:", transcript);
    alert("‡§Ü‡§™‡§®‡•á ‡§ï‡§π‡§æ: " + transcript);

    await processVoiceCommand(transcript);
  };

  recognition.onerror = (event) => {
    console.error("‚ö†Ô∏è Voice recognition error:", event.error);
    alert("‡§µ‡•â‡§Ø‡§∏ ‡§è‡§∞‡§∞: " + event.error);
  };

  recognition.onend = () => {
    console.log("üõë Voice recognition ended");
    // Optionally restart listening
    // recognition.start();
  };

  recognition.start();
}

async function processVoiceCommand(transcript) {
  const lower = transcript.toLowerCase();

  if (
    lower.includes("‡§¨‡§ø‡§≤") || lower.includes("checkout") ||
    lower.includes("payment") || lower.includes("‡§™‡•á‡§Æ‡•á‡§®‡•ç‡§ü")
  ) {
    alert("‚úÖ ‡§ö‡•á‡§ï‡§Ü‡§â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...");
    document.querySelector('[data-voice-checkout]')?.click();
    return;
  }

  const menuItems = await POSDatabase.getAll("menuItems");
  const found = menuItems.find(i => lower.includes(i.name.toLowerCase()));

  if (found) {
    appState.cart.push({
      id: found.id,
      name: found.name,
      qty: 1,
      finalPrice: found.price,
      variant: null,
      modifiers: []
    });

    alert(`‚úÖ '${found.name}' ‡§ï‡•ã 1 qty ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ`);
    renderSection('order');
  } else {
    alert("‚ùì ‡§Ø‡§π ‡§Ü‡§á‡§ü‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ: " + transcript);
  }
}
