import { appState } from '../state/appState.js';
import { renderSection } from '../app/renderSection.js';

function processVoiceCommand(transcript) {
  const lower = transcript.toLowerCase();
  console.log("üß† Processing voice command:", lower);

  // ‚úÖ 1. PLACE ORDER
  if (
    lower.includes("place order") ||
    lower.includes("checkout") ||
    lower.includes("‡§¨‡§ø‡§≤") ||
    lower.includes("‡§ë‡§∞‡•ç‡§°‡§∞ ‡§™‡•Ç‡§∞‡§æ") ||
    lower.includes("‡§ö‡•á‡§ï‡§Ü‡§â‡§ü")
  ) {
    const placeBtn = document.getElementById("placeOrderBtn");
    if (placeBtn && !placeBtn.disabled) {
      placeBtn.click();
      alert("üßæ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§™‡•ç‡§≤‡•á‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ");
    } else {
      alert("üõí ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à‡•§ ‡§™‡§π‡§≤‡•á ‡§ï‡•Å‡§õ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§");
    }
    return;
  }

  // ‚úÖ 2. CLEAR CART
  if (
    lower.includes("clear cart") ||
    lower.includes("empty cart") ||
    lower.includes("cancel order") ||
    lower.includes("‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤") ||
    lower.includes("cart ‡§∏‡§æ‡§´")
  ) {
    appState.cart = [];
    alert("üßπ ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§∏‡§æ‡§´ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ");
    renderSection("order");
    return;
  }

  // ‚úÖ 3. ADD MORE OF LAST ITEM
  if (
    lower.includes("one more") ||
    lower.includes("‡§è‡§ï ‡§î‡§∞") ||
    lower.includes("same again") ||
    lower.includes("repeat item")
  ) {
    const lastItem = appState.cart[appState.cart.length - 1];
    if (lastItem) {
      const repeatItem = { ...lastItem, qty: 1 };
      appState.cart.push(repeatItem);
      alert(`üîÅ ‡§è‡§ï ‡§î‡§∞ ${lastItem.name} ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ`);
      renderSection("order");
    } else {
      alert("‚ùå ‡§ï‡•ã‡§à ‡§™‡§ø‡§õ‡§≤‡§æ ‡§Ü‡§á‡§ü‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ");
    }
    return;
  }

  // ‚úÖ 4. Add items (Lassi, Vada Pav)
  const itemNames = ["lassi", "‡§≤‡§∏‡•ç‡§∏‡•Ä", "vada pav", "‡§µ‡§°‡§º‡§æ ‡§™‡§æ‡§µ"];
  const modifiersList = ["kesar", "mango", "dryfruit", "pineapple", "strawberry", "litchi"];
  const modifiersHindi = {
    "‡§ï‡•á‡§∏‡§∞": "kesar",
    "‡§Æ‡•à‡§Ç‡§ó‡•ã": "mango",
    "‡§°‡•ç‡§∞‡§æ‡§Ø‡§´‡•ç‡§∞‡•Ç‡§ü": "dryfruit",
    "‡§Ö‡§®‡§æ‡§®‡§æ‡§∏": "pineapple",
    "‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§¨‡•á‡§∞‡•Ä": "strawberry",
    "‡§≤‡•Ä‡§ö‡•Ä": "litchi"
  };

  const isLassi = lower.includes("lassi") || lower.includes("‡§≤‡§∏‡•ç‡§∏‡•Ä");
  const isVadaPav = lower.includes("vada pav") || lower.includes("‡§µ‡§°‡§º‡§æ ‡§™‡§æ‡§µ");

  if (isLassi || isVadaPav) {
    const name = isLassi ? "Lassi" : "Vada Pav";

    // Variant detection
    let variant = null;
    if (lower.includes("full") || lower.includes("‡§¨‡§°‡§º‡§æ")) variant = { name: "Full", price: 0 };
    if (lower.includes("half") || lower.includes("‡§õ‡•ã‡§ü‡§æ") || lower.includes("small")) variant = { name: "Half", price: 0 };

    // Modifier detection
    const modifiers = [];
    for (const m of modifiersList) {
      if (lower.includes(m)) {
        modifiers.push({ name: m, price: 0 });
      }
    }
    for (const [hindi, eng] of Object.entries(modifiersHindi)) {
      if (lower.includes(hindi)) {
        modifiers.push({ name: eng, price: 0 });
      }
    }

    const cartItem = {
      id: `voice-${Date.now()}`,
      name,
      variant,
      modifiers,
      finalPrice: 30, // You can calculate actual price from DB if needed
      qty: 1,
    };

    appState.cart.push(cartItem);
    alert(`‚ûï ${name} ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ${variant ? " (" + variant.name + ")" : ""}${modifiers.length ? " with " + modifiers.map(m => m.name).join(", ") : ""}`);
    renderSection("order");
    return;
  }

  alert("‚ùì ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ");
}
